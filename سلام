const express = require("express");
const bodyParser = require("body-parser");
const request = require("request");

const app = express();
app.use(bodyParser.json());

const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "arabic-bot";

// ุฏุงูุฉ ุฅุฑุณุงู ุฑุณุงูุฉ
function sendMessage(senderId, messageText) {
  request(
    {
      url: "https://graph.facebook.com/v17.0/me/messages",
      qs: { access_token: PAGE_ACCESS_TOKEN },
      method: "POST",
      json: {
        recipient: { id: senderId },
        message: { text: messageText },
      },
    },
    (error, response, body) => {
      if (error) {
        console.error("ุฎุทุฃ ูู ุงูุฅุฑุณุงู:", error);
      } else if (response.body.error) {
        console.error("ุฎุทุฃ ูู API:", response.body.error);
      }
    }
  );
}

// ุชุญูู ูู Webhook
app.get("/", (req, res) => {
  const mode = req.query["hub.mode"];
  const token = req.query["hub.verify_token"];
  const challenge = req.query["hub.challenge"];

  if (mode && token) {
    if (mode === "subscribe" && token === VERIFY_TOKEN) {
      console.log("โ Webhook verified");
      res.status(200).send(challenge);
    } else {
      res.sendStatus(403);
    }
  } else {
    res.send("โ ุงูุจูุช ุดุบุงู");
  }
});

// ุงุณุชูุจุงู ุงูุฑุณุงุฆู
app.post("/", (req, res) => {
  const body = req.body;

  if (body.object === "page") {
    body.entry.forEach(function (entry) {
      const webhook_event = entry.messaging[0];
      const senderId = webhook_event.sender.id;

      if (webhook_event.message && webhook_event.message.text) {
        const message = webhook_event.message.text;

        let reply;
        if (message.includes("ุงูุณูุงู")) {
          reply = "ูุนูููู ุงูุณูุงู ูุฑุญูุฉ ุงููู ๐ธ";
        } else if (message.includes("ูููู")) {
          reply = "ุงูุญูุฏ ููู ุจุฎูุฑ ๐ ูุฃูุชุ";
        } else if (message.includes("ุงุณูู")) {
          reply = "ุฃูุง ุจูุช ุนุฑุจู ูุฎุฏูุชู ๐ค";
        } else if (message.includes("ูุฑุญุจุง") || message.includes("ุงููุง")) {
          reply = "ุฃููุงู ูุณููุงู ๐ ููุฑุช ุงูุฏุฑุฏุดุฉ!";
        } else if (message.includes("ุจุงู") || message.includes("ูุน ุงูุณูุงูุฉ")) {
          reply = "๐ค ูู ุฃูุงู ุงูููุ ูููุงู ุจุฎูุฑ!";
        } else if (message.includes("ูุณุงุนุฏุฉ")) {
          reply = "ุงูุฃูุงูุฑ ุงููุชุงุญุฉ: ุงูุณูุงูุ ููููุ ุงุณููุ ูุฑุญุจุงุ ุจุงูุ ุงูุฏุนุงุก.";
        } else if (message.includes("ุฏุนุงุก") || message.includes("ุงูุฏุนุงุก")) {
          reply = "๐ฟ ุงูููู ุตููู ูุณูู ุนูู ูุจููุง ูุญูุฏ ๏ทบ";
        } else {
          reply =
            "ูุง ูููุช ูุตุฏู ๐ค ุฌุฑุจ ุชูุชุจ (ุงูุณูุงูุ ููููุ ุงุณููุ ูุฑุญุจุงุ ุจุงูุ ูุณุงุนุฏุฉุ ุงูุฏุนุงุก).";
        }

        sendMessage(senderId, reply);
      }
    });
    res.status(200).send("EVENT_RECEIVED");
  } else {
    res.sendStatus(404);
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`๐ ุงูุจูุช ุดุบุงู ุนูู ุงููููุฐ ${PORT}`);
});